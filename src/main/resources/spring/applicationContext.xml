<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
    <!-- 加载配置文件 -->
    <!--	<context:property-placeholder location="classpath:db-local.properties" />-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!-- 注解开发 -->
    <!-- 自动扫描组件，这里要把controler下面的 controller去除，他们是在spring3-servlet.xml中配置的，如果不去除会影响事务管理的。 -->
    <context:component-scan
            base-package="com.xyh.authorityManagement.*">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!-- 数据源，使用Druid -->
    <bean id="dataSource"
          class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="maxActive" value="20"/>
        <property name="initialSize" value="20"/>
        <property name="minIdle" value="20"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxOpenPreparedStatements" value="20"/>
        <!-- 配置监控统计拦截的filters,和防sql注入 -->
        <property name="filters" value="stat,wall"/>
    </bean>

    <!-- sqlSessinFactory -->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载mybatis的配置文件 -->
        <property name="configLocation"
                  value="classpath:mybatis/mybatis-config.xml"/>
        <!-- 配置mapper文件位置，扫描映射文件，可以使用Ant风格的路径格式 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置mapper扫描，并创建mapper.java的实例对象 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage"
                  value="com.xyh.authorityManagement.mapper"/>
        <property name="sqlSessionFactoryBeanName"
                  value="sqlSessionFactory"/>
    </bean>
    <!--JedisPool这个bean的构造方法需要多个参数-->
    <bean class="redis.clients.jedis.JedisPool" id="jedisPool">
        <constructor-arg name="host" value="${redis.host}"/>
        <constructor-arg name="port" value="${redis.port}"/>
        <constructor-arg name="password" value="${redis.password}"/>
        <constructor-arg name="timeout" value="${redis.timeout}"/>
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
    </bean>
    <bean class="redis.clients.jedis.JedisPoolConfig" id="jedisPoolConfig">
        <property name="maxIdle" value="${maxIdle}"/>
        <property name="maxTotal" value="${maxActive}"/>
        <property name="maxWaitMillis" value="${maxWait}"/>
        <property name="testOnBorrow" value="${testOnBorrow}"/>
        <property name="blockWhenExhausted" value="${blockWhenExhausted}"/>
    </bean>
    <!-- 事务管理器 对mybatis操作数据库事务控制，spring使用jdbc的事务控制类 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- shiro的过滤工厂，相当默认的加载了9个过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 安全管理器，shiro核心组件(大脑) Facade模式 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 用户如果没有登陆，当他在访问资源的时候，就会自动跳转到登陆的页面 -->
        <property name="loginUrl" value="/login.html"/>
        <!-- 当用户没有访问某项资源权限的时候，跳转到该页面 -->
        <property name="unauthorizedUrl" value="/error.html"/>
        <property name="successUrl" value="/index.html"/>
        <!-- 过滤链的定义：定义URL访问的时候对应的认证或授权时处理的过滤器 -->
        <property name="filterChainDefinitions">
            <value>
                /error.html = anon
                /login.html = anon
                /index.html = anon

                /user.html = perms["用户管理"]
                /user/user* = perms["用户管理"]
                /role.html = perms["角色管理"]
                /role/role* = perms["角色管理"]
                /menu.html = perms["菜单管理"]
                /menu/menu* = perms["菜单管理"]
                /roleMenuSet.html = perms["角色权限管理"]
                /role/findRoleMenuByRoleid = perms["角色权限管理"]
                /role/role/updateRoleMenu = perms["角色权限管理"]
                /userRoleSet.html = perms["用户角色管理"]
                /user/findUserRole = perms["用户角色管理"]
                /user/updateUserRole = perms["用户角色管理"]
                /log.html = perms["日志管理"]
                /log/* = perms["日志管理"]
                /druid/index.html = perms["数据库监控"]

                /dept.html = perms["部门"]
                /emp.html = perms["员工"]

                /sale.html = perms["销售额统计"]

                /casual.html = perms["临时工计件"]

                /*.html = authc
                /menu/* = authc
                /*=authc
            </value>
        </property>
    </bean>
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="realm"/>
    </bean>
    <!-- 自定义的realm -->
    <bean id="realm" class="com.xyh.authorityManagement.shiro.Realm"/>

    <!-- 启动shiro注解 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <!-- 默认使用JDK代理 ，如被代理类没有实现接口，必须使用下列配置开启 cglib代理  -->
        <property name="proxyTargetClass" value="true"/>
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- 对安全管理器 增强代码 ， spring 后处理器 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 开启注解AOP -->
    <aop:aspectj-autoproxy/>
    <!-- 注解方式配置事物，为了配合自定义注解 -->
    <tx:annotation-driven
            transaction-manager="transactionManager" proxy-target-class="true"
            order="200"/>

    <!--开启任务调度-->
    <task:annotation-driven/>

</beans>